import { bot } from '#src';
import { XSTRO, createSticker, randomizeArray } from '#utils';
import { getBuffer, getJson } from 'xstro-utils';
import { delay } from 'baileys';
import { font } from '#lib';
import { LANG } from '#theme';

bot(
  {
    pattern: 'dice',
    public: true,
    desc: 'Get Random Dice',
    type: 'fun',
  },
  async (message, match) => {
    const frames = ['‚öÅ', '‚öÇ', '‚öÖ', '‚öÉ', '‚öÑ', '‚öÄ', '‚öÇ', '‚öÅ', '‚öÑ', '‚öÅ'];
    const msg = await message.send('Rolling...');
    console.log(frames);
    for (const frame of randomizeArray(frames)) {
      await delay(800);
      await msg.edit(frame);
    }
  }
);

bot(
  {
    pattern: 'facts',
    public: true,
    desc: 'Get random facts',
    type: 'fun',
  },
  async (message) => {
    return await message.send(`${await XSTRO.facts()}`);
  }
);

bot(
  {
    pattern: 'quotes',
    public: true,
    desc: 'Get random quotes',
    type: 'fun',
  },
  async (message) => {
    return await message.send(`${await XSTRO.quotes()}`);
  }
);

bot(
  {
    pattern: 'advice',
    public: true,
    desc: 'Get random advice',
    type: 'fun',
  },
  async (message) => {
    return await message.send(`${await XSTRO.advice()}`);
  }
);

bot(
  {
    pattern: 'rizz',
    public: true,
    desc: 'Get random rizz',
    type: 'fun',
  },
  async (message) => {
    return await message.send(`${await XSTRO.rizz()}`);
  }
);

bot(
  {
    pattern: 'bible',
    public: true,
    desc: 'Get random bible verse',
    type: 'search',
  },
  async (message, match) => {
    if (!match) return await message.send('Please provide a verse:\n.john3:16');
    return await message.send(await getJson(`${LANG.API}/api/bible?verse=${match}`));
  }
);

bot(
  {
    pattern: 'fancy',
    public: true,
    desc: 'Convert text to fancy text',
    type: 'tools',
  },
  async (message, match) => {
    if (!match) return await message.send('Please provide a text');
    return await message.send(await font.listall(match).join('\n'));
  }
);

bot(
  {
    pattern: 'style',
    public: true,
    desc: 'Style text',
    type: 'tools',
  },
  async (message, match, { prefix }) => {
    if (!match)
      return await message.send(
        '_Usage :_ ' + prefix + 'style <number>,<text>\n> Example: ' + prefix + 'style 1,hello'
      );
    match = match.split(',');
    if (match[0] > 54) return await message.send('_Provide a number between 1-54_');
    const text = font.listall(match[1]);
    return await message.send(text[Number(match[0])]);
  }
);

bot(
  {
    pattern: 'insult',
    public: true,
    desc: 'Get random insult',
    type: 'fun',
  },
  async (message) => {
    return await message.send(
      (await getJson('https://evilinsult.com/generate_insult.php?lang=en&type=json')).insult
    );
  }
);

bot(
  {
    pattern: 'math',
    public: true,
    desc: 'Solve math',
    type: 'tools',
  },
  async (message, match) => {
    if (!match) return await message.send('Please provide a math equation');
    return await message.send(await getJson(`${LANG.API}/api/solveMath?expression=${match}`));
  }
);

bot(
  {
    pattern: 'meme',
    public: true,
    desc: 'Create a meme yourself',
    type: 'fun',
  },
  async (message, match) => {
    if (!match) return await message.send('Please provide a text');
    const meme = await getBuffer(`https://brat.caliphdev.com/api/brat?text=${match}`);
    const sticker = await createSticker(meme);
    return await message.send(sticker, { type: 'sticker' });
  }
);

bot(
  {
    pattern: 'rainbow',
    public: false,
    type: 'fun',
    desc: 'Sends a sequence of rainbow-colored hearts',
  },
  async (message) => {
    const heartEmojis = ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü§ç'];
    const msg = await message.send('‚ù§Ô∏è');
    for (const emoji of heartEmojis) {
      await delay(800);
      await msg.edit(emoji);
    }
  }
);

bot(
  {
    pattern: 'sad',
    public: false,
    type: 'fun',
    desc: 'Sends a sequence of sad emojis',
  },
  async (message) => {
    const sadEmojis = [
      'ü•∫',
      'üòü',
      'üòï',
      'üòñ',
      'üò´',
      'üôÅ',
      'üò©',
      'üò•',
      'üòì',
      'üò™',
      'üò¢',
      'üòî',
      'üòû',
      'üò≠',
      'üíî',
      'üò≠',
      'üòø',
    ];
    const msg = await message.send('ü•∫');
    for (const emoji of sadEmojis) {
      await delay(700);
      await msg.edit(emoji);
    }
  }
);

bot(
  {
    pattern: 'world',
    desc: 'send world emojis with your text',
    type: 'fun',
  },
  async (message, match) => {
    const regix = /#world/g;
    if (!regix.test(match)) {
      return await message.send(
        '*_Please provide text with #world_*\n> Example: `world of wasi , #xstro`'
      );
    }
    const worldEmojis = ['üåè', 'üåç', 'üåé'];
    let msg = await message.send(match.replace(regix, worldEmojis[0]));

    for (let i = 0; i < 15; i++) {
      await new Promise((resolve) => setTimeout(resolve, 700)); // Sleep for 700ms
      const randomEmoji = worldEmojis[Math.floor(Math.random() * worldEmojis.length)];
      await msg.edit(match.replace(regix, randomEmoji));
    }
  }
);

bot(
  {
    pattern: 'solar',
    type: 'fun',
    desc: 'shows solar system animation',
  },
  async (message) => {
    const frames = [
      '‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚òÄ\n‚óºÔ∏è‚óºÔ∏èüåé‚óºÔ∏è‚óºÔ∏è\nüåï‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\nüåï‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏èüåé‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚òÄ\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óºÔ∏èüåï‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏èüåé‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚òÄ‚óºÔ∏è',
      '‚óºÔ∏è‚óºÔ∏è‚óºÔ∏èüåï‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏èüåé‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚òÄ‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏èüåï\n‚óºÔ∏è‚óºÔ∏èüåé‚óºÔ∏è‚óºÔ∏è\n‚òÄ‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
    ];

    let msg = await message.send(frames[0]);
    for (const frame of frames) {
      await new Promise((resolve) => setTimeout(resolve, 500));
      await msg.edit(frame);
    }
  }
);

bot(
  {
    pattern: 'snake',
    type: 'fun',
    desc: 'Show snake room',
  },
  async (message, match) => {
    const snakeFrames = [
      '‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏èÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚Äé‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óºÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
      '‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óºÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è\n‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è‚óªÔ∏è',
    ];
    const msg = await message.send('‚óºÔ∏è');
    for (const frame of snakeFrames) {
      await new Promise((resolve) => setTimeout(resolve, 250));
      await msg.edit(frame);
    }
  }
);

bot(
  {
    pattern: 'plane',
    type: 'fun',
    desc: 'Shows edits of a plane moving across the screen',
  },
  async (message, match) => {
    const planeFrames = [
      '---------------\n‚úà-------------\n---------------',
      '---------------\n-‚úà------------\n---------------',
      '---------------\n--‚úà-----------\n---------------',
      '---------------\n---‚úà----------\n---------------',
      '---------------\n----‚úà---------\n---------------',
      '---------------\n-----‚úà--------\n---------------',
      '---------------\n------‚úà-------\n---------------',
      '---------------\n-------‚úà------\n---------------',
      '---------------\n--------‚úà-----\n---------------',
      '---------------\n---------‚úà----\n---------------',
      '---------------\n----------‚úà---\n---------------',
      '---------------\n-----------‚úà--\n---------------',
      '---------------\n------------‚úà-\n---------------',
      '---------------\n-------------‚úà\n---------------',
    ];
    const { key: editKey } = await message.send(planeFrames[0]);
    for (let i = 1; i < planeFrames.length; i++) {
      await new Promise((resolve) => setTimeout(resolve, 700));
      await message.send(planeFrames[i], { edit: editKey });
    }
  }
);

bot(
  {
    pattern: 'hand',
    type: 'fun',
    desc: 'Hand practice edits, 18+',
  },
  async (message, match) => {
    const handFrames = [
      '8‚úäÔ∏è===D',
      '8=‚úäÔ∏è==D',
      '8==‚úäÔ∏è=D',
      '8===‚úäÔ∏èD',
      '8==‚úäÔ∏è=D',
      '8=‚úäÔ∏è==D',
      '8‚úäÔ∏è===D',
      '8=‚úäÔ∏è==D',
      '8==‚úäÔ∏è=D',
      '8===‚úäÔ∏èD',
      '8==‚úäÔ∏è=D',
      '8=‚úäÔ∏è==D',
      '8‚úäÔ∏è===D',
      '8=‚úäÔ∏è==D',
      '8==‚úäÔ∏è=D',
      '8===‚úäÔ∏èD',
      '8==‚úäÔ∏è=D',
      '8=‚úäÔ∏è==D',
      '8‚úäÔ∏è===D',
      '8=‚úäÔ∏è==D',
      '8==‚úäÔ∏è=D',
      '8===‚úäÔ∏èD üí¶',
      '8==‚úäÔ∏è=Düí¶ üí¶',
      '8=‚úäÔ∏è==D üí¶üí¶ üí¶',
    ];
    const { key: editKey } = await message.send(handFrames[0]);
    for (let i = 1; i < handFrames.length; i++) {
      await new Promise((resolve) => setTimeout(resolve, 300));
      await message.send(handFrames[i], { edit: editKey });
    }
  }
);

bot(
  {
    pattern: 'nikal',
    type: 'fun',
    info: 'show loduu edits',
  },
  async (message, match) => {
    const nikalFrames = [
      '‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†â‚†ô‚†≤‚°Ä‚†Ä\n ‚†Ä‚£¥‚†ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ‚¢≥‚°Ä‚†Ä‚°è‚†Ä‚†Ä‚†Ä   ‚†Ä  ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚°Ä   ‚£ß‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä  ‚†Ä    ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤     ‚£ø  ‚£∏   get   ‚°á\n ‚£ü‚£ø‚°≠‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚†Ä‚†Ä      ‚£ø  ‚¢π‚†Ä          ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ‚†Ä‚†Ä‚†Ä__‚†Ä   ‚†Ä   ‚°ø ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä    ‚°º\n‚†Ä‚†Ä‚†Ä‚†π‚£∂‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†É‚†Ä   ‚†ò‚†§‚£Ñ‚£†‚†û‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å‚†Ä‚†Ä‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è‚†Ä‚†Ä ‚†Ä‚£Ñ‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
      '‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†â‚†ô‚†≤‚°Ä‚†Ä\n ‚†Ä‚£¥‚†ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ‚†Ä  ‚¢≥‚°Ä‚†Ä‚°è‚†Ä‚†Ä‚†Ä   ‚†Ä  ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚°Ä   ‚£ß‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä       ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤     ‚£ø  ‚£∏   out   ‚°á\n ‚£ü‚£ø‚°≠‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚†Ä‚†Ä      ‚£ø  ‚¢π‚†Ä          ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ‚†Ä‚†Ä|__|‚†Ä‚†Ä   ‚°ø ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä    ‚°º\n‚†Ä‚†Ä‚†Ä‚†π‚£∂‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†É‚†Ä   ‚†ò‚†§‚£Ñ‚£†‚†û‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å‚†Ä‚†Ä‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è‚†Ä‚†Ä ‚†Ä‚£Ñ‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
    ];

    const { key: editKey } = await message.send(`\n${nikalFrames[0]}\n`);
    for (let i = 0; i < nikalFrames.length; i++) {
      for (let j = 0; j < nikalFrames.length; j++) {
        await new Promise((resolve) => setTimeout(resolve, 500));
        await message.send(`\n${nikalFrames[j]}\n`, {
          edit: editKey,
        });
      }
    }
  }
);
